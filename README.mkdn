Cristal 3: A Modular SMPP Gateway
==========================

Features
---
-   Modular design
-   Implements SMPP version 3.4
-   Keyword-based matching
-   JSON-based interchange format
-   Push (by HTTP POST) and pull (by TCP socket)
-   Rabbit MQ messaging layer\*
-   Web management interface
-   Dynamic reconfiguration
-   Re-entrance
-   Preprocessor
-   High throughput
-   Module libraries in multiple languages.
-   Wildcard modules


General
---
Cristal sits between arbitrary applications and an SMPP gateway. It exposes an interface via TCP to which applications can connect and, using JSON, send commands to it, to execute things like sending messages (and, of course, getting messages sent to them).

The applications are identified by keyword; the first word in an SMS message is considered to be the keyword.

Because it doesn't create and destroy sockets for every request, it is highly scalable. And because the applications also connect once and receive the messages meant for them when the messages arrive, it also eliminates the lag and resource drain that may be encountered if, say, HTTP was used to reach the applications.

It can be re-configured without restating it, by passing a new configuration (in JSON) to its configuration port.

All communication is carried out in JSON.

There are APIs for writing applications for Cristal2 included; for Ruby and Haskell.

Issues
------
1.  It was written before `Data.ByteString` became common and workable in Haskell. So an upgrade would have to start with moving all instances of `String` to `Data.ByteString`. The work required would be something on the order of resulting in Cristal3.
